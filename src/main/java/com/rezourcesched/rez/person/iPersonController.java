package com.rezourcesched.rez.person;

import java.util.List;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.rezourcesched.rez.entity.Person;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.servers.Server;

@RequestMapping("/person")
@OpenAPIDefinition(info = @Info(title = "Rezource Scheduler"), servers = {@Server(url = "http://localhost:8080", description = "Local server")})
public interface iPersonController {
  @Operation(
      summary = "Returns a list of People",
      description = "Returns a list of People given a personId, email, phone or name",
      responses = {
          @ApiResponse(
              responseCode = "200", 
              description = "A list of People is returned", 
              content = @Content(mediaType = "application/json", 
              schema = @Schema(implementation = Person.class))),
          @ApiResponse(
              responseCode = "400", 
              description = "The request parameters are invalid", 
              content = @Content(mediaType = "application/json")),
          @ApiResponse(
              responseCode = "404", 
              description = "No People were found with the input criteria", 
              content = @Content(mediaType = "application/json")),
          @ApiResponse(
              responseCode = "500", 
              description = "An unplanned error occurred", 
              content = @Content(mediaType = "application/json"))
      },
      parameters = {
          @Parameter(
              name = "personId", 
              allowEmptyValue = false, 
              required = false, 
              description = "The unique key id given to the person generated by the database"),
          @Parameter(
              name = "email", 
              allowEmptyValue = false, 
              required = false, 
              description = "Find the person by email"),
          @Parameter(
              name = "postalCode", 
              allowEmptyValue = false, 
              required = false, 
              description = "Find the person by phone number"),
          @Parameter(
              name = "rezourceType", 
              allowEmptyValue = false, 
              required = false, 
              description = "Find person by First Name"),
          @Parameter(
              name = "rezourcerId", 
              allowEmptyValue = false, 
              required = false, 
              description = "Find the person by Last Name")
      }
      
  )
  
  @GetMapping
  @ResponseStatus(code = HttpStatus.OK)
  List<Person> fetchPerson(
      @RequestParam(required = false) Long personId, 
      @RequestParam(required = false) String email,
      @RequestParam(required = false) String phone,
      @RequestParam(required = false) String firstName,
      @RequestParam(required = false) String lastName);
}
